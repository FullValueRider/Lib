Class oldTypeInfo
    Attribute VB_Name = "oldTypeInfo"
    Attribute VB_GlobalNameSpace = False
    Attribute VB_Creatable = True
    Attribute VB_PredeclaredId = True
    Attribute VB_Exposed = True
    Attribute VB_Description = "Provides metadata on Types"
    
    /*
    
    The TypeInfo class provides better MetaData regarding groups of Types
    
    
    
    
    We start by definng ISAXXXXXX methods for
    - Numbers
    - Strings ( we exclude objects returning strings from a DefaaultMember)
    - Booleans
    - Primitives (Any of Number,String or Boolean)
    - Admin (Any of Err, Empty Null, Nothing, GroupType.
    - ListArray
    - TaBleArray
    - MathArray
    - AnyArray
    - ItemObject (not an iterable object)
    - ItemByIndex container objects
    - Item ByKey Container objects
    - Item ByToArray)
    
    
    For the purposes of this library we use the term Enumerable to
    describe a group of elements that can be elucidated on a 
    one by one basis
    
    Consideration of Enumerables that are readily acessible in VBA
    either by virtue of being an intric entity of VBA or
    by being in a library installed by default on windows based pcs
    are
    * Arrays
    * Collection
    * Scripting.Dictionary (Scripting.Runtime)
    * ArrayList (msCorlib)
    * Stack (msCorelib)
    * Queue (msCorelib)
    
    COnsideration of these Enumerables shows that they can be
    classified according to properties in two fundmentals ways
    * the method used for accessing a single element
    * the starting point for the 'index' used to retrieve an element
    - Method for accessing an Item
    . By Index either by () or Item() (Array, Collection, ArrayList)
    . By Key  .Item(key) (Scripting.Dictionary)
    . By first extracting an array and then using byIndex (Stack, Queue)
    
     - First Index Type
      The first index As always 0 (ArrayList)
      The First index As alway 1 (Collection)
      The first Index may be any number less than or equal to the LastIndex (Array)
      Index As not used (Scripting.Dictionary, Stack, Queue)
    */
    

    

    
    


    ' Public Enum ShortType
        
    '     IsAnyShortType = ANY_IN_GROUP
    '     IsByte = idbyte
    '     IsCurrency = idCurrency
    '     IsDate = idDate
    '     IsDecimal = idDecimal
    '     IsDouble = idDouble
    '     IsInteger = idInteger
    '     IsLong = idLong
    '     IsLongLong = idLongLOng
    '     IsLongPtr = idLongLong
    '     IsSingle = idSingle
    '     IsBoolean = idBoolean
        
    ' End Enum


    ' Public Enum PrimitiveType
        
    '     IsAnyShortType = ANY_IN_GROUP
    '     IsByte = idbyte
    '     IsCurrency = idCurrency
    '     IsDate = idDate
    '     IsDecimal = idDecimal
    '     IsDouble = idDouble
    '     IsInteger = idInteger
    '     IsLong = idLong
    '     IsLongLong = idLongLOng
    '     IsLongPtr = idLongLong
    '     IsSingle = idSingle
    '     IsBoolean = idBoolean
    '     IsString = idString
        
    ' End Enum


    ' Public Enum IteratorType
        
    '     IsAnyIterator = ANY_IN_GROUP
    '     IsIteratorOfNumbers
    '     IsIteratorOfStrings
    '     IsIteratorOfItems
        
    ' End Enum


    ' Public Enum EnumerableObjectType

    '     IsAnyEnumerableObject = ANY_IN_GROUP
    '     IsItemByForEach
    '     'AsKeyByForEach
    '     IsItemByToArrayForEach
    '     IsItemByKeysForEach
    '     IsWrappedEnum
    '     IsOneBasedEnumerable
    '     IsZeroBasedEnumerable
        
    ' End Enum


    ' Public Enum EnumerableType

    '     IsAnyEnumerable = ANY_IN_GROUP
    '     IsArray
    '     IsItemByForEach                      ' Any object that allows Items by for each or anarray
    '     IsItemByForEachObject                ' Excludes arrays
    '     IsKeyByForEach
    '     IsItemByToArrayForEach
    '     IsItemByKeysForEach
    '     IsItemByIndex
    '     IsWrappedEnum
    '     IsOneBasedEnumerable
    '     IsZeroBasedEnumerable
        

    ' End Enum


    


    

    ' Private s                   As State

  


    ' Private Sub SetupAdmin()

    '     Set s.Admin = Hkvp.Deb
        
    '     ' TypeInfo/values that have been designated As administrative
    '     With s.Admin
        
    '         .Add "empty", idEmpty
    '         .Add "error", idError
    '         .Add "null", idNull
    '         .Add "unknown", idIUnKnownPtr
    '         .Add "nothing", idNothing
        
    '     End With
    ' '  Debug.Print "admin", s.Admin.TestKeys
    ' End Sub
        
    
    
        
        
    ' P

    
    ' Private Sub SetupPrimitive()

    '     Set s.Primitive = Hkvp.Deb

    '     s.Primitive.AddKnownArrayPairs s.Short.Keys, s.Short.Items
    '     'Debug.Print "primitive/short", s.Primitive.TestKeys
    '     s.Primitive.AddKnownArrayPairs s.Admin.Keys, s.Admin.Items
    ' 'Debug.Print "primitive/admin", s.Primitive.TestKeys
    '     s.Primitive.Add("string", idString)
    ' ' Debug.Print "primitive/string", s.Primitive.TestKeys
        
    ' End Sub

        
    ' Public Sub SetupItemByIndex()

    '     Set s.ItemByIndex = Hkvp.Deb
        
    '     With s.ItemByIndex
        
    '         .Add "collection", idCollection
    '         .Add "arrayList", idArrayList
    '     End With
        
    ' End Sub



    ' Public Sub SetupItemByToArrayByIndex()
        
    '     Set s.ItemByToArrayByIndex = Hkvp.Deb
        
    '     With s.ItemByToArrayByIndex

    '         .Add "seq", idSeq
    '         .Add "stack", idStack
    '         .Add "queue", idQueue
            
    '     End With
        
    ' End Sub
    
    ' Public Sub SetupItemByKey()
        
    '     Set s.ItemByKey = Hkvp.Deb
        
    '     With s.ItemByKey

    '         .Add "chashd", idcHashD
    '         .Add "hkvp", idHkvp
    '         .Add "scripting.dictionary", idDictionary
    '         .Add "dictionary", idDictionary
    '         .Add "kvpair", idKVPair
            
    '     End With
        
    ' End Sub


    ' Public Sub SetupWrappedEnums()

    '     Set s.WrappedEnum = Hkvp.Deb
        
    '     With s.WrappedEnum
        
    '         .Add "enummessage", idEnumMessage
    '         .Add "enumtypes", idEnumTypes
    '         .Add "enumpreset", idEnumPreset
        
    '     End With
        
    ' End Sub

    
    ' Public Sub SetupIterators()
        
    '     Set s.Iterator = Hkvp.Deb
        
    '     With s.Iterator
        
    '         .Add "iterarray", idIterArray
    '         .Add "iterconst", idIterConst
    '         .Add "iteritems", idIterItems
    '         .Add "iternum", idIterNum
    '         .Add "iterstrings", idIterStrings
        
    '     End With
        
    ' End Sub

    ' Public Sub SetupEnumerableObjects()
        
    '     'if we add previous group we run the risk of duplicate keys
    '     ' so we add individual items
    '     Set s.EnumerableObject = Hkvp.Deb
        
    '     With s.EnumerableObject
    
    '         .Add "seq", idSeq                   ' &H100
    '         .Add "collection", idCollection
    '         .Add "chashd", idcHashD
    '         .Add "hkvp", idHkvp
    '         .Add "queue", idQueue
    '         .Add "stack", idStack
    '        .Add "dictionary", idDictionary                 ' Scripting.Dictionary
    '        .Add "scripting.dictionary", idScriptingDictionary
    '         .Add "kvpair", idKVPair
        
    '     End With

    ' End Sub


    ' Public Sub SetupZeroBasedEnumerable()

    '     Set s.ZeroBased = Hkvp.Deb
        
    '     With s.ZeroBased
        
    '         .Add "stack", idStack
    '         .Add "queue", idQueue
    '         .Add "hkvp", idHkvp
        
    '     End With
        
    ' End Sub

     
    ' Public Sub SetupOneBasedEnumerable()

    '     Set s.OneBased = Hkvp.Deb
        
    '     With s.OneBased
        
    '         .Add "collection", idCollection
    '         .Add "seq", idSeq
            
    '     End With
        
    ' End Sub

    
    ' Public Sub SetupEnumerables()

    '     Set s.Enumerable = Hkvp.Deb
        
    '     Dim myKey As Variant
    '     For Each myKey In s.Primitive.Keys
    '         Dim myKeyArray As String = myKey & "()"
    '         Dim myItem As PrimitiveType = s.Primitive.Item(myKey)
    '         s.Enumerable.Add myKeyArray, myItem

    '     Next
        
    '     For Each myKey In s.EnumerableObject.Keys
        
    '         s.Enumerable.Add myKey, s.EnumerableObject.Item(myKey)
    '         s.Enumerable.Add myKey & "()", s.EnumerableObject.Item(myKey)
        
    '     Next
        
    '     s.Enumerable.Add "variant()", idVariant
        
    '     ' probably many other user defined objects to add
    ' End Sub


    ' Private Sub SetupStrings()
    '     Set s.String = Hkvp.Deb
    '     s.String.Add("string", idString)
    ' End Sub


    ' Private Sub SetupBooleans()
    '     Set s.Boolean = Hkvp.Deb
    '     s.Boolean.Add("boolean", idBoolean)
    ' End Sub

    
    ' Private Sub SetupObjects()
    '     Set s.Object = Hkvp.Deb
    '     s.Object.Add "object", idObject
    ' End Sub

    
    ' Public Function SetupTypeGroups() As Hkvp
        
    '     Set s.TypeGroup = Hkvp.Deb
        
    '     With s.TypeGroup
        
    '         .Add GroupType.IsAnyType, s.EnumerableObject 'enumTypes.OrdToTypeName
    '         .Add GroupType.IsAdmin, s.Admin
    '         .Add GroupType.IsNumber, s.Number
    '         .Add GroupType.IsShort, s.Short
    '         .Add GroupType.IsPrimitive, s.Primitive
        
    '         .Add GroupType.IsItemByIndex, s.ItemByIndex
    '         '.Add IsKeyByForEach, s.KeyByForEach
    '         .Add GroupType.IsItemByToArrayByIndex, s.ItemByToArrayByIndex
    '         .Add GroupType.IsItemByKey, s.ItemByKey
    '         .Add GroupType.IsWrappedEnum, s.WrappedEnum
            
    '         .Add GroupType.IsZeroBased, s.ZeroBased
    '         .Add GroupType.IsOneBased, s.OneBased
            
    '         .Add GroupType.IsEnumerableObject, s.EnumerableObject
    '         .Add GroupType.IsEnumerable, s.Enumerable
            
           
            
    '         .Add GroupType.IsString, s.String
    '         .Add GroupType.IsBoolean, s.Boolean
    '         .Add GroupType.IsIterator, s.Iterator
    '     End With

    ' End Function

    
    ' Public Function Group(Optional ByVal ipGroupType As GroupType = GroupType.Isanytype) As Hkvp
        
    '     If s.TypeGroup Is Nothing Then
    '         SetupDictionaries
    '     End If
        
    '     If ipGroupType = GroupType.IsAnyType Then
    '        Return s.TypeGroup
    '     Else
    '         Dim myhkvp As Hkvp = s.TypeGroup.Item(ipGroupType)
    '         Return s.TypeGroup.Item(ipGroupType)
    '     End If
        
    ' End Function

    ' '@Description("True if the Item As an object but As not an enumerable object, _
    ' if the paramarray contains arrays or enumerables, _
    ' these are examined to see if they contain non enumerable objectss.")
    ' Public Function IsItemObject(ParamArray ipParamArray() As Variant) As Boolean
        
    '     Dim myPR As ParserResult = VariantParser.Deb(CVar(ipParamArray)).ToItems
        
    '     If myPR.IsNotAllocated Then
    '         Return False
        
    '     End If
        
    '     Select Case myPR.ResultGroup
            
    '         Case GroupType.IsItemObject
            
    '             Return True
                
    '         Case GroupType.IsArray
            
    '             Dim myItem As Variant
    '             For Each myItem In myPR.Cargo
                
    '                 If Not VBA.IsObject(myItem) Then
    '                     Return False
    '                 End If
                    
    '                 If TypeInfo.Group(GroupType.IsEnumerableObject).HoldsKey(TypeInfo.BaseType(myItem)) Then
    '                     Return False
    '                 End If
                    
                    
    '             Next
                
    '             Return True
            
    '         Case Else
            
    '             Return False
                
    '     End Select
        
    ' End Function

    
    ' Public Function IsNotItemObject(ParamArray ipParamArray() As Variant) As Boolean
        
    '     Dim myPR As ParserResult = VariantParser.Deb(CVar(ipParamArray)).ToItems
        
    '     If myPR.IsNotAllocated Then
    '         Return True
    '     End If
        
    '     Select Case myPR.ResultGroup 'myPR.InputGroup
            
    '         Case GroupType.IsItemObject:                     Return False
                
    '         Case GroupType.IsParamArray
            
    '             Dim myItem As Variant
    '             For Each myItem In myPR.Cargo
                
    '                 If VBA.IsObject(myItem) Then
                        
    '                     If TypeInfo.Group(GroupType.IsEnumerableObject).LacksKey(TypeInfo.BaseType(myItem)) Then
    '                         Return False
    '                     End If
                    
    '                 End If
                    
    '             Next
                
    '             Return True
            
                
    '         Case Else:                              Return True
                
    '     End Select
        
    ' End Function

    ' '@Description("True if a variant contains a string.  Disallows objects with a default member of string")
    ' Public Function IsAString(ByRef ipString As Variant) As Boolean
        
    '     If VBA.IsObject(ipString) Then
    '         Return False
    '     End If
        
    '     If VBA.VarType(ipString) <> vbString Then
    '         Return False
    '     End If
        
    '     Return True
        
    ' End Function
    
    ' '@Description("True if a variant does not contain a string.  Disallows objects with a default member of string")
    ' Public Function IsNotAString(ByRef ipString As Variant) As Boolean
            
    '     If Not VBA.IsObject(ipString) Then
    '         If VBA.VarType(ipString) = vbString Then
    '             Return False
    '         End If
    '     End If
        
    '      Return True
    
    ' End Function
    
    
    ' '@Description("Returns True As all members of the paramarray are strings.  Disallows objects with a default member of string)
    ' Public Function IsString(ParamArray ipParamarray() As Variant) As Boolean
        
    '     Dim myPR As ParserResult = VariantParser.Deb(CVar(ipParamarray)).ToIterable(StringAsString)
        
    '     If myPR.IsNotAllocated Then
    '         Return False
    '     End If
        
    '     Select Case myPR.ResultGroup 'myPrInputGroup
            
    '         Case GroupType.IsParamArray
            
    '             Dim myItem As Variant
    '             For Each myItem In myPR.Cargo
                    
    '                 If IsNotAString(myItem) Then
    '                     Return False
    '                 End If
                    
    '             Next
                
    '             Return True
            
    '         Case GroupType.IsString:                    Return True
    '         Case Else:                                  Return False
            
    '     End Select
    
    ' End Function

    ' Public Function IsNotString(ParamArray ipParamarray() As Variant) As Boolean
        
    '     Dim myPR As ParserResult = VariantParser.Deb(CVar(ipParamarray)).ToIterable(StringAsString)
        
    '     If myPR.IsNotAllocated Then
    '         Return True
    '     End If
        
    '     Select Case myPR.ResultGroup 'myPrInputGroup
            
    '         Case GroupType.IsParamArray
            
    '             Dim myItem As Variant
    '             For Each myItem In myPR.Cargo
                    
    '                 If IsAString(myItem) Then
    '                     Return False
    '                 End If
                    
    '             Next
                
    '             Return True
                
    '         Case GroupType.IsString:                            Return False
    '         Case Else:                                          Return True
            
    '     End Select
              
    ' End Function


    ' Public Function IsEnumerable(ParamArray ipParamArray() As Variant) As Boolean
        
    '     Dim myPR As ParserResult = VariantParser(CVar(ipParamArray)).ToIterable(StringAsString)
    
    '     If myPR.IsNotAllocated Then
    '         Return False
    '     End If
        
    '     Select Case myPR.ResultGroup 'myPrInputGroup

    '         Case GroupType.IsParamArray
            
    '             Dim myItem As Variant
    '             For Each myItem In myPR.Cargo
        
    '                 If TypeInfo.Group(GroupType.IsEnumerable).LacksKey(TypeInfo.BaseType(myItem)) Then
    '                     Return False
    '                 End If
    '             Next
                
    '             Return True
                
                
    '         Case GroupType.IsArray, GroupType.IsItemByIndex, GroupType.IsItemByKey, GroupType.IsItemByToArrayByIndex:     Return True
    '         Case Else:                      Return False
        
                
    '     End Select
    
    ' End Function


    ' Public Function IsNotEnumerable(ParamArray ipParamarray() As Variant) As Boolean
        
    '     Dim myPR As ParserResult = VariantParser(CVar(ipParamarray)).ToIterable(StringAsString)
    
    '     If myPR.IsNotAllocated Then
    '         Return True
    '     End If
        
    '     Select Case myPR.ResultGroup 'myPrInputGroup

    '         Case GroupType.IsParamArray
            
    '             Dim myItem As Variant
    '             For Each myItem In myPR.Cargo
        
    '                 If TypeInfo.Group(GroupType.IsEnumerable).HoldsKey(TypeInfo.BaseType(myItem)) Then
    '                     Return False
    '                 End If
    '             Next
                
    '             Return True
                
                
    '         Case GroupType.IsArray, GroupType.IsItemByIndex, GroupType.IsItemByKey, GroupType.IsItemByToArrayByIndex: Return False
    '         Case Else:                      Return True
        
                
    '     End Select
        
    ' End Function
    
    
    ' Public Function IsAdmin(ParamArray ipParamarray() As Variant) As Boolean
        
    '     Dim myPR As ParserResult = VariantParser(CVar(ipParamarray)).ToIterable(StringAsString)
    
    '     If myPR.IsNotAllocated Then
    '         Return False
    '     End If
        
    '     Select Case myPR.ResultGroup 'myPrInputGroup

    '         Case GroupType.IsParamArray
            
    '             Dim myItem As Variant
    '             For Each myItem In myPR.Cargo
        
    '                 If TypeInfo.Group(GroupType.IsAdmin).LacksKey(TypeInfo.BaseType(myItem)) Then
    '                     Return False
    '                 End If
    '             Next
                
    '             Return True
                
                
    '         Case GroupType.IsAdmin:             Return True
    '         Case Else:                          Return False
        
                
    '     End Select
        
    ' End Function
    
    ' Public Function IsNotAdmin(ParamArray ipParamarray() As Variant) As Boolean
        
    '     Dim myPR As ParserResult = VariantParser(CVar(ipParamarray)).ToIterable(StringAsString)
    
    '     If myPR.IsNotAllocated Then
    '         Return True
    '     End If
        
    '     Select Case myPR.ResultGroup 'myPrInputGroup

    '         Case GroupType.IsParamArray
            
    '             Dim myItem As Variant
    '             For Each myItem In myPR.Cargo
        
    '                 If TypeInfo.Group(GroupType.IsAdmin).HoldsKey(TypeInfo.BaseType(myItem)) Then
    '                     Return False
    '                 End If
                    
                    
    '             Next
                
    '             Return True
                
                
    '         Case GroupType.IsAdmin:             Return False
    '         Case Else:                          Return True
        
                
    '     End Select
        
    ' End Function
    
  
    ' Public Function IsAnArray(ByRef ipArray As Variant, Optional ipArrayType As ArrayType = IsAnyArrayType) As Boolean
    '     Return ArrayInfo.IsAnArray(ipArray, ipArrayType)
    ' End Function


    ' Public Function IsNotAnArray(ByRef ipArray As Variant, Optional ipArrayTYpe As ArrayType = IsAnyArrayType) As Boolean
    '     Return ArrayInfo.IsNotAnArray(ipArray, ipArrayTYpe)
    ' End Function


    ' Public Function IsANumber(ByRef ipNumber As Variant, ByVal ipNumberType As NumberType = NumberType.IsAnyNumberType) As Boolean
        
    '     Dim myBaseType As String = TypeInfo.BaseType(ipNumber)
        
    '     Select Case
    '     If TypeInfo.Group(GroupType.IsNumber).LacksKey(myBaseType) Then
    '         Return False
    '     End If
        
    '     If ipNumberType = IsAnyNumberType Then
    '         Return True
    '     End If
        
    '     Dim myNumberType As NumberType = enums.Types.TypeNameToOrd.Item(myBaseType)
    '     Return myNumberType = ipNumberType
        
    ' End Function
    
    ' Public Function IsNotANumber(ByRef ipNumber As Variant, ByVal ipNumberType As NumberType = NumberType.IsAnyNumberType) As Boolean
        
    '     Dim myBaseType As String = TypeInfo.BaseType(ipNumber)
    '     If TypeInfo.Group(GroupType.IsNumber).LacksKey(myBaseType) Then
    '         Return True
    '     End If
        
    '     If ipNumberType = IsAnyNumberType Then
    '         Return False
    '     End If
        
    '     Dim myNumberType As NumberType = enums.Types.TypeNameToOrd.Item(myBaseType)
    '     Return myNumberType <> ipNumberType
        
    ' End Function
    
    
    ' Public Function IsNumber(ParamArray ipParamArray() As Variant) As Boolean
        
    '     Dim myPR As ParserResult = VariantParser.Deb(CVar(ipParamArray)).ToIterable
    '     If myPR.IsNotAllocated Then
    '         Return False
    '     End If
        
    '     Select Case myPR.ResultGroup 'myPrInputGroup
            
    '         Case GroupType.IsParamArray
            
    '             Dim myItem As Variant
                
    '             For Each myItem In myPR.Cargo
                    
    '                 If VBA.IsObject(myItem) Then Return False
    '                 If VBA.IsArray(myItem) Then Return False
                        
    '                 If Me.Group(GroupType.IsNumber).LacksKey(TypeInfo.BaseType(myItem)) Then
    '                      Return False
    '                 End If
                    
    '             Next
                
    '         Case GroupType.IsNumber::           Return True
    '         Case Else:                          Return False
            
    '         End Select
        
    ' End Function
    
    

    ' Public Function IsNotNumber(ParamArray ipParamArray() As Variant) As Boolean
        
    '     Dim myPR As ParserResult = VariantParser.Deb(CVar(ipParamArray)).ToIterable
    '     If myPR.IsNotAllocated Then
    '         Return False
    '     End If
        
    '     Select Case myPR.ResultGroup 'myPrInputGroup
            
    '         Case GroupType.IsParamArray
            
    '             Dim myItem As Variant
    '             For Each myItem In myPR.Cargo
                    
    '                 If VBA.IsObject(myItem) Then Return False
    '                 If VBA.IsArray(myItem) Then Return False
                        
    '                 If Me.Group(GroupType.IsNumber).HoldsKey(TypeInfo.BaseType(myItem)) Then
    '                      Return False
    '                 End If
                    
    '             Next
                
    '         Case GroupType.IsNumber::           Return False
    '         Case Else:                          Return True
            
    '     End Select
        
    ' End Function
    
    
    
    ' Public Function IsEmpty(ParamArray ipParamarray() As Variant) As Boolean
        
    '     Dim myPR As ParserResult = VariantParser.Deb(CVar(ipParamarray)).ToIterable
    '     If myPR.IsNotAllocated Then
    '         Return False
    '     End If
        
    '     Select Case myPR.ResultGroup 'myPrInputGroup
            
    '         Case GroupType.IsParamArray
            
    '             Dim myItem As Variant
    '             For Each myItem In myPR.Cargo
                    
    '                 If Not VBA.IsEmpty(myItem) Then
    '                      Return False
    '                 End If
                    
    '             Next
                
    '             Return True
                
    '         Case GroupType.IsAdmin:             Return VBA.IsEmpty(myPR.Cargo(0))
    '         Case Else:                          Return False
            
    '     End Select
        
    '     Return True
        
    ' End Function
    
    ' Public Function IsNotEmpty(ParamArray ipParamarray() As Variant) As Boolean
        
    '     Dim myPR As ParserResult = VariantParser.Deb(CVar(ipParamarray)).ToIterable
    '     If myPR.IsNotAllocated Then
    '         Return False
    '     End If
        
    '     Select Case myPR.ResultGroup 'myPrInputGroup
            
    '         Case GroupType.IsParamArray
            
    '             Dim myItem As Variant
    '             For Each myItem In myPR.Cargo
                    
    '                 If VBA.IsEmpty(myItem) Then
    '                      Return False
    '                 End If
                    
    '             Next
                
    '             Return True
                
    '         Case GroupType.IsAdmin:             Return Not VBA.IsEmpty(myPR.Cargo(0))
    '         Case Else:                          Return True
            
    '     End Select
        
    ' End Function
    
    
    
    ' ' Public Function IsRefTypeByItem(ByRef ipRefType As Variant, ParamArray ipParamarray() As Variant) As Boolean
        
    ' '    IsRefTypeByItem = IsTypeByName(TypeName(ipRefType), CVar(ipParamarray))
        
    ' ' End Function
    
    ' ' Public Function IsRefTypeByTypeOrdinal(ByRef ipRefOrdinal As TypeOrdinal, ParamArray ipParamarray() As Variant) As Boolean
        
    ' '     If ArrayInfo.IsNotAllocated(ipParamarray) Then
    ' '         Return False
    ' '     End If
            
    ' '     If enums.Types.LacksOrd(ipRefOrdinal) Then
    ' '         Return False
    ' '     End If
        
    ' '     Dim myPR As ParserResult = VariantParser(ipParamarray).ToIterable
        
    ' '     Dim myItem As Variant
    ' '     For Each myItem In myPR.Cargo
    ' '         If enums.Types.TypenameToOrdinal(VBA.LCase$(VBA.TypeName(myItem))) <> ipRefOrdinal Then
    ' '             Return False '  , TypeName(myItem)) = 0 Then Return False
    ' '         End If
    ' '     Next
        
    ' '     Return True
         
    ' '  End Function
     
    ' '  Public Function INottRefTypeByTypeOrdinal(ByRef ipRefOrdinal As TypeOrdinal, ParamArray ipParamarray() As Variant) As Boolean
        
    ' '     If ArrayInfo.IsNotAllocated(ipParamarray) Then
    ' '         Return False
    ' '     End If
            
    ' '     If enums.Types.LacksOrd(ipRefOrdinal) Then
    ' '         Return False
    ' '     End If
        
    ' '     Dim myPR As ParserResult = VariantParser(ipParamarray).ToIterable
        
    ' '     Dim myItem As Variant
    ' '     For Each myItem In myPR.Cargo
    ' '         If enums.Types.TypenameToOrdinal(VBA.LCase$(VBA.TypeName(myItem))) = ipRefOrdinal Then
    ' '              Return False '  , TypeName(myItem)) = 0 Then Return False
    ' '         End If
    ' '     Next
        
    ' '     Return True
         
    ' '  End Function
    
    ' [ Description ("True if all types match the reference type.  ipType may be any Item, a Typename string or a TypeOrd") ]
    ' Public Function IsType(ByVal ipType As TypeOrd, ParamArray ipParamarray() As Variant) As Boolean
        
    '     If enums.Types.OrdToTypeName.LacksKey(ipType) Then
    '         Return False
    '     End If
        
    '     Dim myPR As ParserResult = VariantParser.Deb(ipParamarray).ToIterable
    '     If myPR.IsNotAllocated Then
    '         Return False
    '     End If
        
    '     Select Case myPR.ResultGroup 'myPrInputGroup
            
    '         Case GroupType.IsParamArray
        
    '             Dim myItem As Variant
    '             For Each myItem In myPR.Cargo
    '                 If ipType <> enums.Types.TypeNameToOrd(BaseType(myItem)) Then
    '                     Return False
    '                 End If
    '             Next
                
    '             Return True
            
    '         Case Else:                      Return ipType = enums.Types.TypeNameToOrd(myPR.InputBaseType)
                
    '     End Select
        
    ' End Function
    
    ' Public Function IsTypeByName(ByVal ipType As String, ParamArray ipParamarray() As Variant) As Boolean
        
    '     Dim myBasetype As String = BaseType(ipType)
    '     If enums.Types.TypeNameToOrd.LacksKey(myBasetype) Then
    '         Return False
    '     End If
        
    '     Dim myTypeOrd As TypeOrd = enums.Types.TypeNameToOrd(myBasetype)
    '     Return IsType(myTypeOrd, CVar(ipParamarray))
        
    ' End Function
    
    ' Public Function IsTypeByItem(ByVal ipType As Variant, ParamArray ipParamarray() As Variant) As Boolean
        
    '     Dim myBaseType As String = BaseType(ipType)
    '     Return IsTypeByName(myBaseType, CVar(ipParamarray))
        
    ' End Function
    
    
    
    
    ' [ Description ("True if all types do not match the reference type.  ipType may be any Item, a Typename string or a TypeOrd") ]
    ' '   [ Description ("True if all types match the reference type.  ipType may be any Item, a Typename string or a TypeOrd") ]
    ' Public Function IsNotType(ByVal ipType As TypeOrd, ParamArray ipParamarray() As Variant) As Boolean
        
    '     If enums.Types.OrdToTypeName.LacksKey(ipType) Then
    '         Return True  ' probably should be an error
    '     End If
        
    '     Dim myPR As ParserResult = VariantParser.Deb(ipParamarray).ToIterable
    '     If myPR.IsNotAllocated Then
    '         Return True
    '     End If
        
    '     Select Case myPR.ResultGroup 'myPrInputGroup
            
    '         Case GroupType.IsParamArray
        
    '             Dim myItem As Variant
    '             For Each myItem In myPR.Cargo
    '                 If ipType = enums.Types.TypeNameToOrd(BaseType(myItem)) Then
    '                     Return False
    '                 End If
    '             Next
                
    '             Return True
            
    '         Case Else:                      Return ipType <> enums.Types.TypeNameToOrd(myPR.InputBaseType)
                
    '     End Select
        
    ' End Function
        
    ' Public Function IsNotTypeByName(ByVal ipType As String, ParamArray ipParamarray() As Variant) As Boolean
        
    '     Dim myBasetype As String = BaseType(ipType)
    '     If enums.Types.TypeNameToOrd.LacksKey(myBasetype) Then
    '         Return False
    '     End If
        
    '     Dim myTypeOrd As TypeOrd = enums.Types.TypeNameToOrd(myBasetype)
    '     Return IsNotType(myTypeOrd, CVar(ipParamarray))
        
    ' End Function
    
    ' Public Function IsNotTypeByItem(ByVal ipType As Variant, ParamArray ipParamarray() As Variant) As Boolean
        
    '     Dim myBaseType As String = BaseType(ipType)
    '     Return IsNotTypeByName(myBaseType, CVar(ipParamarray))
        
    ' End Function

    ' Public Function AreSameType(ParamArray ipParamarray() As Variant) As Boolean
        
    '     Dim myPR As ParserResult = VariantParser.Deb(ipParamarray).ToIterable(StringToArray)
    '     If myPR.IsNotAllocated Or myPR.Count < 2 Then
    '         Return False
    '     End If
        
    '     Select Case myPR.ResultGroup 'myPrInputGroup
            
    '         Case GroupType.IsParamArray, GroupType.IsArray, GroupType.IsItemByIndex, GroupType.IsItemByToArrayByIndex, GroupType.IsItemByKey
        
    '             Dim myFirstTypeOrd As TypeOrd = enums.Types.TypeNameToOrd.Item(BaseType(myPR.Cargo(0)))
                
    '             Dim myItem As Variant
    '             For Each myItem In myPR.Cargo
    '                 If myFirstTypeOrd <> enums.Types.TypeNameToOrd.Item(BaseType(myItem)) Then
    '                     Return False
    '                 End If
    '             Next
                
    '             Return True
            
                
    '         Case Else:                          Return False
            
    '     End Select
        
    ' End Function
    
    ' Public Function AreNotSameType(ParamArray ipParamarray() As Variant) As Boolean
        
    '     Dim myPR As ParserResult = VariantParser.Deb(ipParamarray).ToIterable(StringToArray)
    '     If myPR.IsNotAllocated Or myPR.Count < 2 Then
    '         Return True
    '     End If
        
    '     Select Case myPR.ResultGroup 'myPR.InputGroup
            
    '         Case GroupType.IsParamArray, GroupType.IsArray, GroupType.IsItemByIndex, GroupType.IsItemByToArrayByIndex, GroupType.IsItemByKey
        
    '             Dim myFirstTypeOrd As TypeOrd = enums.Types.TypeNameToOrd.Item(BaseType(myPR.Cargo(0)))
                
    '             Dim myItem As Variant
    '             For Each myItem In myPR.Cargo
    '                 If myFirstTypeOrd = enums.Types.TypeNameToOrd.Item(BaseType(myItem)) Then
    '                     Return False
    '                 End If
    '             Next
                
    '             Return True
            
                
    '         Case Else:                          Return True
            
    '     End Select
        
    ' End Function
    
    
    
    
End Class